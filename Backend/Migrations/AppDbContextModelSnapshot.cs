// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MobileId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("repairShopShopId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("MobileId");

                    b.HasIndex("UserId");

                    b.HasIndex("repairShopShopId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Backend.Models.FinalAppointment", b =>
                {
                    b.Property<int>("FinalAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MobileModel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepairStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("repairShopShopId")
                        .HasColumnType("int");

                    b.HasKey("FinalAppointmentId");

                    b.HasIndex("UserId");

                    b.HasIndex("repairShopShopId");

                    b.ToTable("FinalAppointment");
                });

            modelBuilder.Entity("Backend.Models.FinalService", b =>
                {
                    b.Property<int>("FinalServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FinalAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("repairShopShopId")
                        .HasColumnType("int");

                    b.HasKey("FinalServiceId");

                    b.HasIndex("FinalAppointmentId");

                    b.HasIndex("UserId");

                    b.HasIndex("repairShopShopId");

                    b.ToTable("FinalService");
                });

            modelBuilder.Entity("Backend.Models.Mobile", b =>
                {
                    b.Property<int>("MobileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Mobile_ModelName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("problemDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MobileId");

                    b.HasIndex("UserId");

                    b.ToTable("Mobile");
                });

            modelBuilder.Entity("Backend.Models.RepairShop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LicenseNo")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ShopContactNo")
                        .HasColumnType("int");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ShopId");

                    b.ToTable("RepairShop");
                });

            modelBuilder.Entity("Backend.Models.Services", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("MobileId")
                        .HasColumnType("int");

                    b.Property<string>("Repair_Status")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("repairShopShopId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MobileId");

                    b.HasIndex("UserId");

                    b.HasIndex("repairShopShopId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Backend.Models.Appointment", b =>
                {
                    b.HasOne("Backend.Models.Mobile", "mobile")
                        .WithMany()
                        .HasForeignKey("MobileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.RepairShop", "repairShop")
                        .WithMany()
                        .HasForeignKey("repairShopShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mobile");

                    b.Navigation("repairShop");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Models.FinalAppointment", b =>
                {
                    b.HasOne("Backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.RepairShop", "repairShop")
                        .WithMany()
                        .HasForeignKey("repairShopShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("repairShop");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Models.FinalService", b =>
                {
                    b.HasOne("Backend.Models.FinalAppointment", "finalappointment")
                        .WithMany()
                        .HasForeignKey("FinalAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.RepairShop", "repairShop")
                        .WithMany()
                        .HasForeignKey("repairShopShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("finalappointment");

                    b.Navigation("repairShop");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Models.Mobile", b =>
                {
                    b.HasOne("Backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Models.Services", b =>
                {
                    b.HasOne("Backend.Models.Appointment", "appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("Backend.Models.Mobile", "mobile")
                        .WithMany()
                        .HasForeignKey("MobileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Backend.Models.RepairShop", "repairShop")
                        .WithMany()
                        .HasForeignKey("repairShopShopId");

                    b.Navigation("appointment");

                    b.Navigation("mobile");

                    b.Navigation("repairShop");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
